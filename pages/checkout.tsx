import Head from "next/head";
import React, { useEffect, useState } from "react";
import Header from "../components/Header";
import Layout from "../components/Layout";
import { useAppSelector } from "../redux/app/hooks";
import { selectItems, selectTotalAmount } from "../redux/slice/basketSlice";
import "core-js/actual/array/group";
import ProductRow from "../components/ProductRow";
import Button from "../components/Button";
import Link from "next/link";
import { useRouter } from "next/router";
import Currency from "react-currency-formatter";
import { Stripe } from "stripe";
import { fetchPostJSON } from "../utils/stripe-helpers";
import getStripe from "../utils/getStripe";

function Checkout() {
  const items = useAppSelector(selectItems);
  const [groupItems, setGroupItems] = useState([] as [string, Product[]][]);
  //will be an array of array -> [ [title{0}, Product[]{1}] , [...]  ]

  const router = useRouter();
  const total = useAppSelector(selectTotalAmount);
  const [loading,setLoading] = useState(false)


  useEffect(() => {
    const temp = items.group(({ title }: { title: string }) => title);
    setGroupItems(Object.entries(temp));
  }, [items]);


  async function createCheckoutSession() {
    setLoading(true)

    const checkoutSession: Stripe.Checkout.Session = await fetchPostJSON(
      "/api/checkout_session",
      { items }
    );

    if ((checkoutSession as any).statusCode === 500) {
      console.error((checkoutSession as any).message);
      return;
    }

    // Redirect to Checkout.
    const stripe = await getStripe();
    const { error } = await stripe!.redirectToCheckout({
      // Make the id field from the Checkout Session creation API response
      // available to this file, so you can provide it as parameter here
      // instead of the {{CHECKOUT_SESSION_ID}} placeholder.
      sessionId: checkoutSession.id,
    });

    setLoading(false)
    // If `redirectToCheckout` fails due to a browser or network
    // error, display the localized error message to your customer
    // using `error.message`.
    console.warn(error.message);
  }
  return (
    <div>
      <Head>
        <title>Apple - Basket</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className="mx-auto my-6 w-auto px-8 lg:max-w-5xl">
        <div className="mb-10 space-y-4">
          <h1 className="mb-2 text-2xl font-semibold lg:text-4xl">
            {items.length > 0 ? "Review Your Bag" : "No Items In Your Bag"}
          </h1>
          <p>Free delivery and free returns</p>
          {items.length === 0 && (
            <Button
              onClick={() => router.push("/")}
              title="Continue Shopping"
            />
          )}
        </div>

        {/* subTotal and shipping */}
        {items.length > 0 && (
          <div>
            {Object.entries(groupItems).map(([title, array]) => {
              return <ProductRow key={title} singleProductArray={array[1]} />;
            })}

            <div className="my-6 flex flex-col border-b-2 border-gray-200 pb-4">
              <div className="flex items-center justify-between">
                <p>Subtotal</p>
                <p>
                  <Currency quantity={total} currency="USD" />
                </p>
              </div>
              <div className="flex items-center justify-between">
                <p>Shipping</p>
                <p>Free</p>
              </div>
              <div className="flex items-center justify-between">
                <p>Estimated Tax</p>
                <p>$--</p>
              </div>
            </div>
            <div className="flex items-center justify-between text-xl font-semibold">
              <p>Total</p>
              <p>
                <Currency quantity={total} currency="USD" />
              </p>
            </div>

            {/* checkout */}
            <div className="my-6">
              <h1 className="text-lg font-semibold lg:text-2xl">
                How would you like to checkout
              </h1>
            </div>

            <div className="flex flex-col justify-center gap-y-4 md:flex-row md:gap-4">
              {/* card 1 */}
              <div className="flex flex-1 flex-col items-center justify-center rounded-lg bg-gray-100 p-8 font-semibold md:order-2 lg:text-xl">
                <h1>Pay in full</h1>
                <h1 className="mb-2">
                  <Currency quantity={total} currency="USD" />
                </h1>
                <Button
                  onClick={createCheckoutSession}
                  title="Checkout"
                  width="full"
                  loading={loading}
                />
              </div>

              <div className="flex flex-1 flex-col items-center justify-center rounded-lg bg-gray-100 p-8 font-semibold lg:text-xl">
                <h1>Pay monthly</h1>
                <h1>with apple card</h1>
                <h1 className="mb-2">
                  <Currency quantity={total / 12} currency="USD" />
                  /mo at 0% APR
                </h1>
                <Button title="Check Out with apple card" width="full" />
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
}

export default Checkout;
